# ASP.NET Core
# Build and test ASP.NET Core projects targeting .NET Core.
# Add steps that run tests, create a NuGet package, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/dotnet-core

trigger:
- master

resources:
  containers:
  - container: test_container
    image: buildpack-deps:focal
  - container: nginx
    image: nginx 

pool:
  name: 'default'
  vmImage: 'BESTLYMHOME'
  #vmImage: ubuntu-latest

# steps:
# - task: UseDotNet@2
#   displayName: 'Install .NET Core SDK'
#   inputs:
#     packageType: 'sdk'
#     version: '8.x'
#     includePreviewVersions: true
#     performMultiLevelLookup: true

  
variables:
  buildConfiguration: 'Release'
  YARN_CACHE_FOLDER: $(Pipeline.Workspace)/.yarn

# steps:
# - script: dotnet build --configuration $(buildConfiguration)
#   displayName: 'dotnet build $(buildConfiguration)'+

steps:
- task: Cache@2
  inputs:
    key: '"Yarn" | "$(Agent.OS)" | yarn.lock'
    path: '$(YARN_CACHE_FOLDER)'
    restoreKeys: |
      yarn | "$(Agent.OS)"
      yarn
  displayName: Cache Yarn packages

- script: yarn --frozen-lockfile

- checkout: self
  persistCredentials: true

- task: DotNetCoreCLI@2
  inputs:
    command: 'restore'
    feedsToUse: 'select'
    vstsFeed: 'my-vsts-feed'

- task: DotNetCoreCLI@2
  inputs:
    command: 'build'
    arguments: '--configuration $(buildConfiguration)'
  displayName: 'dotnet build $(buildConfiguration)'

- task: DotNetCoreCLI@2
  inputs:
    command: 'test'
    projects: '**/*Tests/*.csproj'
    arguments: '--configuration $(buildConfiguration) --collect "Code coverage"'

- task: PublishPipelineArtifact@1
  inputs:
    targetPath: '$(Pipeline.Workspace)'
    publishLocation: 'Pipeline'
    artifact: 'drop'
