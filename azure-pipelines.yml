# ASP.NET Core
# Build and test ASP.NET Core projects targeting .NET Core.
# Add steps that run tests, create a NuGet package, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/dotnet-core

trigger:
- master

resources:
  containers:
  - container: test_container
    image: buildpack-deps:focal
  - container: nginx
    image: nginx 

pool:
  name: 'default'
  vmImage: 'BESTLYMHOME'
  #vmImage: ubuntu-latest

# steps:
# - task: UseDotNet@2
#   displayName: 'Install .NET Core SDK'
#   inputs:
#     packageType: 'sdk'
#     version: '8.x'
#     includePreviewVersions: true
#     performMultiLevelLookup: true

  
variables:
  buildConfiguration: 'Release'
  #dockerfilePath: '$(Build.SourcesDirectory)/app/Dockerfile'
  NUGET_PACKAGES: $(Pipeline.Workspace)/.nuget/packages
  tag: '$(Build.BuildId)'

# steps:
# - script: dotnet build --configuration $(buildConfiguration)
#   displayName: 'dotnet build $(buildConfiguration)'+

steps:
- task: Cache@2
  displayName: Cache
  inputs:
    key: 'nuget | "$(Agent.OS)" | **/packages.lock.json,!**/bin/**,!**/obj/**'
    restoreKeys: |
       nuget | "$(Agent.OS)"
       nuget
    path: '$(NUGET_PACKAGES)'
    cacheHitVar: 'CACHE_RESTORED'
# - task: Cache@2
#   displayName: Cache task
#   inputs:
#     key: 'docker | "$(Agent.OS)" | cache'
#     path: $(Pipeline.Workspace)/docker
#     cacheHitVar: CACHE_RESTORED                #Variable to set to 'true' when the cache is restored

# - script: |
#       docker load -i $(Pipeline.Workspace)/docker/cache.tar
#   displayName: Docker restore
#   condition: and(not(canceled()), eq(variables.CACHE_RESTORED, 'true'))

# - task: Docker@2
#   displayName: 'Build Docker'
#   inputs:
#     command: 'build'
#     repository: '$(repository)'
#     dockerfile: '$(dockerfilePath)'
#     tags: |
#       '$(tag)'

# - script: |
#     mkdir -p $(Pipeline.Workspace)/docker
#     docker save -o $(Pipeline.Workspace)/docker/cache.tar $(repository):$(tag)
#   displayName: Docker save
#   condition: and(not(canceled()), not(failed()), ne(variables.CACHE_RESTORED, 'true'))

- checkout: self
  persistCredentials: true

- task: DotNetCoreCLI@2
  inputs:
    command: 'restore'
    feedsToUse: 'select'
    vstsFeed: 'my-vsts-feed'

- task: DotNetCoreCLI@2
  inputs:
    command: 'build'
    arguments: '--configuration $(buildConfiguration)'
  displayName: 'dotnet build $(buildConfiguration)'

- task: DotNetCoreCLI@2
  inputs:
    command: 'test'
    projects: '**/*Tests/*.csproj'
    arguments: '--configuration $(buildConfiguration) --collect "Code coverage"'

- task: PublishPipelineArtifact@1
  inputs:
    targetPath: '$(Pipeline.Workspace)'
    publishLocation: 'Pipeline'
    artifact: 'drop'
